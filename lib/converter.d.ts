import { ConverterOptions } from './types';
export declare class YumiConverter {
    options: ConverterOptions;
    constructor(options?: ConverterOptions);
    convert(html: string): string;
    private convertElement;
    private removeWhitespaceNodes;
    private processText;
    private escapeText;
    private shouldConvertTag;
    private wrapText;
    convertHeading(level: number, text: string, convertAsInline: boolean): string;
    convert_a(el: HTMLElement, text: string): string;
    convert_b: (self: any, text: string) => string;
    convert_blockquote(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_br(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_code: (self: any, text: string) => string;
    convert_del: (self: any, text: string) => string;
    convert_em: (self: any, text: string) => string;
    convert_i: (self: any, text: string) => string;
    convert_kbd: (self: any, text: string) => string;
    convert_s: (self: any, text: string) => string;
    convert_strong: (self: any, text: string) => string;
    convert_samp: (self: any, text: string) => string;
    convert_sub: (self: any, text: string) => string;
    convert_sup: (self: any, text: string) => string;
    convert_h1(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_h2(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_h3(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_h4(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_h5(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_h6(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_hr(): string;
    convert_img(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_p(el: HTMLElement, text: string, convertAsInline: boolean): string;
    convert_pre(el: HTMLElement, text: string): string;
    convert_ul(el: HTMLElement, text: string): string;
    convert_ol(el: HTMLElement, text: string): string;
    private convertList;
    private isNestedList;
    convert_li(el: HTMLElement, text: string): string;
    private getListDepth;
    convert_table(el: HTMLElement, text: string): string;
    convert_caption(el: HTMLElement, text: string): string;
    convert_figcaption(el: HTMLElement, text: string): string;
    convert_td(el: HTMLElement, text: string): string;
    convert_th(el: HTMLElement, text: string): string;
    convert_tr(el: HTMLElement, text: string): string;
}
